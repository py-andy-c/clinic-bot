# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# sqlalchemy.url will be set programmatically in env.py from settings
sqlalchemy.url = 

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, it must be a valid Python datetime.timezone object.
# (see: https://docs.python.org/3/library/datetime.html#datetime.timezone)
# default_timezone = UTC

# max length of characters to apply to the
# migration filenames and identifiers.
# revision_file_token_prefix =
# revision_environment_token_prefix =

# set to 'true' to run the environment file as a
# standalone script, running it in 'exec' mode.
# standalone_mode = false

# enable logging of the SQL generated by alembic
# logging of SQLAlchemy engine can be enabled via the standard Python logging module
# sqlalchemy_engine_logging = false

# set to 'true' to run the migration scripts in 'offline' mode.
# offline_mode = false

# enable polymorphic type dispatch for database drivers that support it.
# polymorphic_type_dispatch = false

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
